<script> 

var StructureEditor = {
	updateNodeURL:"<%= url_for :controller => 'structure', :action => 'move_node' %>",
	adjustNodeURL:"<%= url_for :controller => 'structure', :action => 'adjust_node' %>",
	adjustModifierURL:"<%= url_for :controller => 'structure', :action => 'adjust_modifier' %>",
	createNodeURL:"<%= url_for :controller => 'structure', :action => 'add_node' %>",
	copyNodeURL:"<%= url_for :controller => 'structure', :action => 'copy_node' %>",
	createModifierURL:"<%= url_for :controller => 'structure', :action => 'add_modifier' %>",
  	deleteNodeURL:"<%= url_for :controller => 'structure', :action => 'remove_node' %>",
  	deleteModifierURL:"<%= url_for :controller => 'structure', :action => 'remove_modifier' %>",
  	updateNodeTitleURL:"<%= url_for :controller => 'structure', :action => 'edit_node_title' %>",
  	moveModifierURL:"<%= url_for :controller => 'structure', :action => 'move_modifier' %>",
  	elementInfoURL:"<%= url_for :controller => 'structure', :action => 'element_info' %>",
        themeSrc:"<%=  theme_src %>",
  	
	nodeSelected:null,
	nodeSelectedType:null,
	
	dragging: null,
	
	addNodeTypes: {
		add_page: 'P',
		add_document: 'D',
		add_redirect: 'J',
                add_group: 'G'
	},

        closedElements: [ <%= @closed.join(",") %> ],

  language: "<%= Configuration.languages[0] %>",
	
	addModifierTypes: {
		add_framework: 'F',
		add_template: 'T',
		add_lock: 'L',
		add_edit_control: 'E'	,
		add_ssl: 'S',
		add_domain: 'D'
	},
  
	last_node_added:null,
	last_modifier_added:null,

	elementAdjust:0,
	adjustTimer:null,
	modifierAdjust:0,
	adjustModifierTimer:null,
	
	selectNodeAfterEdit:false,
    	
  
    createDroppable: function (elem) {
		var dropTitle = getChild(elem,'node_line');
		
		return Droppables.add(dropTitle.id, { 
			hoverclass:'node_accept',
			onDrop: StructureEditor.nodeDrop
		});
	},
	
  	draggableStartEffect: function (elem) {
  		StructureEditor.closeChildren(elem);
  		StructureEditor.selectNode(null);
        elem.saved_bg = elem.style.backgroundImage;
        elem.style.backgroundImage = 'none';
        var droppable = getChild(elem,'node_line');
        Droppables.remove(droppable.id);
   },
  
   draggableEndEffect: function (elem) {
    if(elem.saved_bg)
	    elem.style.backgroundImage = elem.saved_bg;
    StructureEditor.createDroppable(elem);
    
  },
  
  
  
  createDraggable: function(elem) {
<% if permit?('editor_structure') %>
  
    if(elem.node_type != 'R') {
      var draggable = new Draggable(elem.id,
      { handle:'node_handle_' + elem.node_id, 
        revert:true, 
        zindex:1000,
        starteffect: StructureEditor.draggableStartEffect,
        endeffect: StructureEditor.draggableEndEffect
      });
      elem.draggable = draggable;
    }
<% end -%>  
  },
  
  createDraggableModifier: function(elem) {
      var draggable = new Draggable(elem.id,
      { revert:true, 
        zindex:1000,
        starteffect: StructureEditor.modifierDraggableStartEffect,
        endeffect: StructureEditor.modifierDraggableEndEffect
      });
      elem.draggable = draggable;
  },
  
  modifierDraggableEndEffect:function(elem) {
      setTimeout("StructureEditor.dragDeleteModifier('" + elem.id + "');",20);
  },
  
  modifierDraggableStartEffect:function(elem) {
      var modifier_id = elem.id.split("_");
      modifier_id =modifier_id[1];
      StructureEditor.dragging = modifier_id;
      StructureEditor.selectNode();
  },
  
  dragDeleteModifier: function(elem_id) {
      var modifier_id = elem_id.split("_");
      modifier_id =modifier_id[1];
      StructureEditor.dragging = null;
      if(!$(elem_id).droppedOnNode) {
      	 StructureEditor.selectNode('mod',modifier_id);
      }
      else {
          StructureEditor.selectNode('mod',modifier_id);
	  $(elem_id).droppedOnNode = false;
      }
  },

  deleteModifier: function(elem_id) {
      var modifier_id = elem_id.split("_");
      modifier_id = modifier_id[1];
      StructureEditor.dragging = null;
      if(confirm('<%= jh "Remove this modifier?".t %>')) {
        StructureEditor.modifierRemove(modifier_id);
        StructureEditor.hideInfo();
      }
  },

  addNodeCreateDraggable: function (elem) {
    var draggable = new Draggable(elem.id,
     { revert: true,
       zindex:1000,
       starteffect: StructureEditor.addNodeDraggableStartEffect,
       endeffect: StructureEditor.addNodeDraggableEndEffect
     });
     elem.draggable = draggable;
  },
  
  addNodeDraggableStartEffect: function(elem) {
  },
  
  addNodeDraggableEndEffect: function (elem) {
  },
  
  updateNodeHighlight: function(node_type,id) {
  
    if(StructureEditor.nodeSelected) {
      StructureEditor.sendNodeAdjustment(); // Clear out any adjustment to the system
      Element.removeClassName(StructureEditor.nodeSelectedType + '_handle_' + StructureEditor.nodeSelected,'node_selected');
      if(StructureEditor.nodeSelectedType == 'node') {
	      Element.removeClassName('node_line_' + StructureEditor.nodeSelected,'node_selected');
      }
    }
    
    var elem = $(node_type + '_handle_' + id);
    if(elem) {
      Element.addClassName(elem,'node_selected')
    }
    if(node_type == 'node') {
		var title_elem = $('node_line_' + id);
		if(title_elem) {
		Element.addClassName(title_elem,'node_selected')
		}
	}
    
    StructureEditor.nodeSelected = id;
    StructureEditor.nodeSelectedType = node_type;
  
  },

  selectNode: function(node_type,id) 
  {
    if(node_type == 'mod' && StructureEditor.dragging == id) {
    
    }
    else {
      if(StructureEditor.movingNode) return false;
      if(id) {
	      if(StructureEditor.nodeSelectedType != node_type || StructureEditor.nodeSelected != id) {
	        StructureEditor.loadElementInfo(node_type,id);
	      }
      }
      else {
        StructureEditor.hideInfo();
      }
    
      StructureEditor.updateNodeHighlight(node_type,id);
      
    }
  },

  showPageLanguage: function(node_id,language) {
      StructureEditor.language = language;
     StructureEditor.loadElementInfo('node',node_id);
  },

  showFrameworkLanguage: function(mod_id,language) {
      StructureEditor.language = language;
     StructureEditor.loadElementInfo('mod',mod_id);
  },
 
  
  loadElementInfo:function(node_type,node_id) {
      var url =   StructureEditor.elementInfoURL
      
      if(node_type == 'node') {
        var node = $('node_' + node_id)
        if(node.node_type == 'M') {
          url = node.options_url;
        
        }
      }
  		
      var params = $H({ node_type: node_type,
        node_id: node_id,
        language: StructureEditor.language 
  						});

          StructureEditor.hideInfo();
  		new Ajax.Updater('element_info',
  						url,
  						{ 
  						    evalScripts: true,
  						    method: 'get',
  							parameters: params.toQueryString(),
  							onComplete: function(req) {
    							if (StructureEditor.nodeSelectedType == node_type || StructureEditor.nodeSelected == node_id)
                    StructureEditor.showElementInfo(true);
      							StructureEditor.scrollElementInfo();
    							}
  						});
  						
  	
  
  },

  hideInfo: function() {
      // $j('#add_elements').hide();
       $j('#element_info').hide(); 
  },

  showElementInfo: function(show) {
     if(show) {
       $j('#add_elements').hide();
       $j('#show_add_elements_button').show();
       $j('#element_info').show(); 
     } else {
       StructureEditor.selectNode(null);
       $j('#show_add_elements_button').hide();
       $j('#element_info').hide(); 
       $j('#add_elements').show();
     }
   },

   scrollElementInfo: function() {
     var top = $j(document).scrollTop();
     var offset = $j("#site_structure").offset();
     var diff = top - offset.top + 40;
     if(diff < 0) { diff = 0; }
     $j('#element_info').css({'margin-top': diff });
   }, 
  
  nodeDelete:function(node_id,delete_text) {
  	if(confirm(delete_text)) {
      StructureEditor.selectNode(null);
  		StructureEditor.nodeRemove(node_id);

  	}
  },
    
  
  editTemplate: function(template_id) {
      var url = "<%= url_for(:controller => 'structure', :action =>'template_info') %>/" + template_id;
      new Ajax.Updater('boxcontent', "url", {asynchronous:true, evalScripts:true, onComplete:function(request){showBox()}, onLoading:function(request){showLoader()}});
  },
  
  editModule: function(module_id) {
      var url = "<%= url_for(:controller => 'structure', :action =>'module_info') %>/" + module_id;
      new Ajax.Updater('boxcontent', "url", {asynchronous:true, evalScripts:true, onComplete:function(request){showBox()}, onLoading:function(request){showLoader()}});
  },
  
  
  refreshNodeView: function(nodeDiv) {
      var updateDiv = $(nodeDiv).select('.node_children')[0];
  
      var elems = getChildElementsByClass(updateDiv,'node');
      
      for(var i=0;i<elems.length;i++) {
          // Need to update the saved bg for the end effect
        elems[i].saved_bg = null;
        if(i == elems.length - 1)  {
          elems[i].saved_bg = 'none';
 		  Element.setStyle(elems[i],
								{ backgroundImage: 'url(' +  StructureEditor.themeSrc + 'icons/menu/last_top.gif)', 
								  backgroundRepeat: 'no-repeat' });
        }
        else {
          Element.setStyle(elems[i],
                            { backgroundImage: 'url(' + StructureEditor.themeSrc + 'icons/menu/line.gif)',
                              backgroundRepeat: 'repeat-y'});
        }
      }
      // Now need to update the 'plus' / 'minus' image for showing the children
      // div
      var update_node_id = updateDiv.parentNode.node_id;
      
      if($('toggle_' + update_node_id)) {
		if(elems.length > 0) {
			Element.show('children_' + update_node_id);
			$('toggle_' + update_node_id).src = StructureEditor.themeSrc + 'icons/menu/last_open.gif';
			$('toggle_' + update_node_id).onclick = function() {
				StructureEditor.toggleVisible($('toggle_' + update_node_id));
			}
		}
		else {
			$('toggle_' + update_node_id).src = StructureEditor.themeSrc + 'icons/menu/last.gif';
			$('toggle_' + update_node_id).onclick = null;
		}
	  }
  
  }, 
  
  nodeDrop: function(drag,drop) {
   
    var parentDiv = drag.parentNode;
   
   if(drag.id == drop.parentNode.id)
    return;  
    
    if(drag.className == 'add_node_elem') {
        StructureEditor.nodeAdd(drop.parentNode.node_id,StructureEditor.addNodeTypes[drag.id]);
    
    }
    else if(drag.className == 'add_module_elem') {
        StructureEditor.nodeAdd(drop.parentNode.node_id,'M',drag.module);
    }
    else if(drag.className == 'add_mod_elem') {
    	StructureEditor.modifierAdd(drop.parentNode.node_id,StructureEditor.addModifierTypes[drag.id]);
    
    }
    else if(drag.className == 'mod_node') {
    	drag.droppedOnNode= true;
    	
    	var nodeLine = drop;
    	
    	if(drop.id != drag.parentNode.id) {
    		var elems = getChildElements(drop);
    		drop.insertBefore(drag,elems[0]);
    		
    		var req = $H({
    			node_id: drop.parentNode.node_id,
    			modifier_id: drag.mod_id
    			});
    		new Ajax.Request(StructureEditor.moveModifierURL,
    				{
    					parameters: req.toQueryString()
					});
    	}
    
    }
    else {
      
      // Move node to the correct location
      var dropChildrenDiv = $(drop.parentNode).select('.node_children')[0]
      
      if(drag.parentNode.id == dropChildrenDiv.id)
      return;
      
      parentDiv.removeChild(drag);
      
      StructureEditor.movingNode = true;
      
      var req = $H({
        node_id: drag.node_id,
        parent_id: drop.parentNode.node_id    
      });
      
      // update the database
      new Ajax.Request(StructureEditor.updateNodeURL,
                  {
                      parameters : req.toQueryString(),
                      onComplete : function(resp) {
                        StructureEditor.movingNode = false;
                        StructureEditor.selectNode('node',drag.node_id);
                      }
                  }
                  );               
      
      
      var dropId = drop.parentNode.id.split('_');
      dropId = dropId[1];    
      
      
      // Need to sort instead of just appending    
      dropChildrenDiv.appendChild(drag);
      setTimeout(function() {
      	StructureEditor.refreshNodeView(parentDiv.parentNode);
      	StructureEditor.refreshNodeView(drop.parentNode);
      	},10);
      
    }
    
    
 },
 
  copyPage: function(parent_id,node_id,confirm_text) {
    if(!confirm(confirm_text)) {
      return false;
    }
    
    var req = {
      node_id: node_id,
      parent_id: parent_id
    }
    
		var parent = $('node_' + parent_id);
		var children = $(parent).select('.node_children')[0];
    
    
    new Ajax.Request(StructureEditor.copyNodeURL,
          {
            parameters : req,
            onComplete: function(resp) {
              new Insertion.Bottom(children,resp.responseText);
              StructureEditor.refreshNodeView(parent);
							setTimeout('StructureEditor.editPageTitle(StructureEditor.last_node_added,true);',10);
						}
          });
    
  },
 
	nodeAdd: function(parent_id, node_type, module_name) {
		if(node_type == undefined) {
			node_type = 'P';  
		}
		
		var req = {
			node_type: node_type,
			parent_id: parent_id,
			title: 'ENTER TITLE'
			};
			
			if(node_type == 'M') {
			req.module_name = module_name;
			}
			
			var parent = $('node_' + parent_id);
			
			var children = $(parent).select('.node_children')[0];
			
			// update the database
			new Ajax.Request(StructureEditor.createNodeURL,
						{
							parameters : req,
							onComplete : function(resp) {
								new Insertion.Bottom(children,resp.responseText);
								StructureEditor.refreshNodeView(parent);
								setTimeout('StructureEditor.editPageTitle(StructureEditor.last_node_added,false);',10);
							}
						}
						);               
	},
	
	modifierAdd: function(parent_id, modifier_type) {
		var req = {
			modifier_type: modifier_type,
			parent_id: parent_id
			};
			
		var parent_node_line = $('node_line_' + parent_id);
		
		new Ajax.Request(StructureEditor.createModifierURL,
					{ 
						parameters: req,
						onComplete: function(req) {
							new Insertion.Top(parent_node_line,req.responseText);
							setTimeout('StructureEditor.selectNode("mod",StructureEditor.last_modifier_added)',10);
						}
					});
	
	},
	
	nodeRemove: function(node_id) {
	
	var req = {
	  node_id: node_id
	};
	
	var node = $('node_' + node_id);
	var parentNode = node.parentNode.parentNode;
	
	new Ajax.Request(StructureEditor.deleteNodeURL,
				{
				parameters : req,
				onComplete : function(resp) {
					Element.remove(node);
					StructureEditor.refreshNodeView(parentNode);
				}
				}
				);
	
	},
	
	modifierRemove: function(modifier_id) {
	
		Element.remove('mod_' + modifier_id);
	
		var req = {
			modifier_id: modifier_id
			};
		StructureEditor.selectNode('mod');
		
		new Ajax.Request(StructureEditor.deleteModifierURL,
					{
					parameters : req
					}
					);
	
	},
	
	collapseTree: function() {
	  var children = $A(getChildElementsByClass($('children_1'),'node'));
	  children.each(function(elm) {
	    StructureEditor.closeChildrenDeep(elm);
	  });
	},
	
	expandTree: function() {
	  var children = $A(getChildElementsByClass($('children_1'),'node'));
	  children.each(function(elm) {
	    StructureEditor.expandChildrenDeep(elm);
	  });
	},
	
	closeChildrenDeep: function(node) {
	  StructureEditor.closeChildren(node);
	  if($('children_' + node.node_id)) {
	    var children = $A(getChildElementsByClass($('children_' + node.node_id),'node'));
	    children.each(function(elm) {
	      StructureEditor.closeChildrenDeep(elm);
	    });
    }
	  
	},
	
	expandChildrenDeep: function(node) {
	  StructureEditor.showChildren(node);
	  if($('children_' + node.node_id)) {
	    var children = $A(getChildElementsByClass($('children_' + node.node_id),'node'));
	    children.each(function(elm) {
	      StructureEditor.expandChildrenDeep(elm);
	    });
    }
	},
	
	showChildren: function(node) {
  	var node_id = node.node_id;
		if(getChildElementsByClass($('children_' + node_id),'node').length > 0) {
			Element.show('children_' + node_id);
			$('toggle_' + node_id).src = (Element.getStyle('children_' + node_id,'display') == 'block')?StructureEditor.themeSrc + 'icons/menu/last_open.gif':StructureEditor.themeSrc + 'icons/menu/last_closed.gif';
                        StructureEditor.closedElements =  StructureEditor.closedElements.without(node_id);
                        StructureEditor.setClosedCookie();

		}
	},
	
	
	closeChildren: function(node) {
		var node_id = node.node_id;
		if(getChildElementsByClass($('children_' + node_id),'node').length > 0) {
			Element.hide('children_' + node_id);
			$('toggle_' + node_id).src = (Element.getStyle('children_' + node_id,'display') == 'block')?StructureEditor.themeSrc + 'icons/menu/last_open.gif':StructureEditor.themeSrc + 'icons/menu/last_closed.gif';
                        StructureEditor.closedElements.push(node_id);
                        StructureEditor.closedElements =  StructureEditor.closedElements.uniq();
                        StructureEditor.setClosedCookie();
		}
               
	},
	
	toggleVisible: function(elem) {
		var node_id = elem.parentNode.node_id;
		Element.toggle('children_' + node_id);
                var open = (Element.getStyle('children_' + node_id,'display') == 'block')
		$('toggle_' + node_id).src = open ? StructureEditor.themeSrc + 'icons/menu/last_open.gif':StructureEditor.themeSrc + 'icons/menu/last_closed.gif';
                
                if(!open) {
                 StructureEditor.closedElements.push(node_id);
                 StructureEditor.closedElements =  StructureEditor.closedElements.uniq();
                } else {
                 StructureEditor.closedElements =  StructureEditor.closedElements.without(node_id);
                }
                StructureEditor.setClosedCookie();
                
	},

        setClosedCookie: function() {
          var val = StructureEditor.closedElements.join('|');
          SCMS.setCookie('structure',val, new Date( new Date() + (7 * 1000 * 60 * 60 * 24) ));
        },
	
	editPageTitle: function(node_id,select_node) {

    <% if !permit?('editor_structure') || !permit?('editor_structure_advanced') %>
      return;
    <% end -%>
			
		if(select_node) {
			StructureEditor.selectNodeAfterEdit = true;
		}
		else {
			StructureEditor.selectNodeAfterEdit = false;
		}
		
		var node = $('node_' + node_id);
		
		var elem = $('node_title_' + node_id);
		//var elem = getChild(node_title,'node_handle');  
		var edit_elem = $('node_title_edit_' + node_id);
		
		StructureEditor.selectNode(null);
		
    if(elem && !elem.editing_title) {
      elem.editing_title = 1;
      var txt = elem.innerHTML;
      if(node.node_type != 'G') {
        if(elem.innerHTML[0] != '/') {
          txt = ''
          edit_elem.innerHTML = '';

        } else {
          txt = elem.innerHTML.substr(1);
          edit_elem.innerHTML = '/';
        }
      } 
      else {
        txt = elem.innerHTML;
        edit_elem.innerHTML = '';
      }                          

			Element.hide(elem);
			Element.show(edit_elem);
			var ctrl = Builder.node('input',{ type: "text", width: 20, value: txt });
			edit_elem.original_text = txt;
			
			edit_elem.appendChild(ctrl);
			
			ctrl.onkeydown = StructureEditor.titleHandleEditEnter;
			
			ctrl.focus();
			ctrl.select();
		}
	},
	
	titleHandleEditEnter: function(evt) {
	
		evt = (evt) ? evt : ((window.event) ? event : null);
		var charCode = (evt.charCode) ? evt.charCode :
				((evt.which) ? evt.which : evt.keyCode);
		
		var Esc = (window.event) ?    
						27 : evt.DOM_VK_ESCAPE // MSIE : Firefox
		
		var submitData = true;
		if(charCode == Esc) {
			submitData = false;    
		}  
		else if(charCode != 13 && charCode != 3)
			return;
		var txt = this.value;
		
		var reg = /^[a-zA-Z\-_.0-9]*$/

		var edit_elem = this.parentNode;
		var node_line = edit_elem.parentNode;
		var node = node_line.parentNode;

		if(submitData && node.node_type != 'G' && !reg.match(txt)) {
		  alert('<%= jh "Page url should only include Letters, Numbers, Dashes (-), Periods (.) and Underscores (_)".t %>');
		  return;
		}
		
		var elem = getChild(node_line,'node_title');  
		
		Element.remove(this);
		
		var selectNode = StructureEditor.selectNodeAfterEdit;
		
		if(submitData) {
			var node_id=node.node_id;
			
			var req = $H({ node_id: node_id,
						title: txt,
						select_node: (selectNode?1:0) });
						
			if(node.node_type == 'P' || node.node_type == 'M' || node.node_type == 'D' || node.node_type == 'J') {
        if(node.node_type == 'P' && txt == '') {
          elem.innerHTML = '<%= jh "Home Page".t %>';
        } else {
          elem.innerHTML = '/' + txt;
        }
			}
			else {
			elem.innerHTML = txt;
			
			}
			
			if(selectNode && node.node_type != 'M') {
      
				new Ajax.Updater('element_info',
								StructureEditor.updateNodeTitleURL,
								{
								parameters : req.toQueryString(),
								evalScripts:true,
								onComplete : function(resp) {
										StructureEditor.updateNodeHighlight('node',node_id);
                    StructureEditor.showElementInfo(true);
									}
								}
								);
			}
			else if(selectNode && node.node_type == 'M') {
      new Ajax.Request(StructureEditor.updateNodeTitleURL,
              { parameters: req.toQueryString(),
                onComplete: function() {
                    StructureEditor.selectNode('node',node_id);
                    StructureEditor.showElementInfo(true);
                 }
              } )
      
      
      }
      else {
			new Ajax.Request(StructureEditor.updateNodeTitleURL,
							{ parameters: req.toQueryString() } )
							
			
			}
		}
			
			
		Element.hide(edit_elem);
		Element.show(elem);
		//Element.removeClassName(parent,'paragraph_title_edit');
		
		elem.editing_title = 0;
	
	},
	
	updateNodeTitle: function(node_id,title) {
	var node = $('node_' + node_id);
	
	var node_title = getChild(node,'node_title');
	var elem = getChild(node_title,'node_handle');  
	elem.innerHTML = title;
	
	},
	
	addedNode: function (node_id) {
		this.last_node_added = node_id;
	},
	
	addedModifier: function (mod_id) {
		this.last_modifier_added = mod_id;
	},
	


	moveKey: function(evt) {
		
		evt = (evt) ? evt : ((window.event) ? event : null);
		var charCode = (evt.charCode) ? evt.charCode :
				((evt.which) ? evt.which : evt.keyCode);
		
		var ArrowUpKey = (window.event) ?    
						38 : evt.DOM_VK_UP ;// MSIE : Firefox
		var ArrowDownKey = (window.event) ?    
						40 : evt.DOM_VK_DOWN ;// MSIE : Firefox
		var ArrowRightKey = (window.event) ?    
						39 : evt.DOM_VK_RIGHT ;// MSIE : Firefox
		var ArrowLeftKey = (window.event) ?    
						37 : evt.DOM_VK_LEFT ;// MSIE : Firefox
						
						
		if(StructureEditor.nodeSelected && StructureEditor.nodeSelectedType == 'node') {
			var node = $('node_' + StructureEditor.nodeSelected);
			
			if(charCode == ArrowUpKey) {
			StructureEditor.moveNodeUp(node);
			
			return false;
			}
			else if(charCode == ArrowDownKey) {
			StructureEditor.moveNodeDown(node);
			
			return false;
			}
		}
		else if(StructureEditor.nodeSelected && StructureEditor.nodeSelectedType == 'mod') {
			var mod = $('mod_' + StructureEditor.nodeSelected);
			
			if(charCode == ArrowRightKey) {
			StructureEditor.moveModifierRight(mod);
			
			return false;
			}
			else if(charCode == ArrowLeftKey) {
			StructureEditor.moveModifierLeft(mod);
			
			return false;
			}
		}
		return true;
		
	},
	
	adjustNode: function(node_id,amt) {
		if(StructureEditor.adjustTimer) {
			clearTimeout(StructureEditor.adjustTimer);
			StructureEditor.adjustTimer = null;
		}
		
		StructureEditor.elementAdjust += Number(amt);
		
		StructureEditor.adjustTimer = setTimeout(StructureEditor.sendNodeAdjustment,700);
	},
	
	
		
	sendNodeAdjustment: function() {
		if(StructureEditor.adjustTimer) {
			clearTimeout(StructureEditor.adjustTimer);
		}
		if(StructureEditor.elementAdjust != 0) {
			var adjustment = StructureEditor.elementAdjust;
		    
		    StructureEditor.elementAdjust = 0;
		    
		    var node_id=StructureEditor.nodeSelected;

                    var node = $("node_" + node_id);
                    var parentContainer = node.parentNode;
                    var elems = getChildElementsByClass(node.parentNode,'node');
		    
                    var previousElem = null;
                    for(var i=0;i<elems.length;i++) {
                        if(elems[i] == node)
                            break;
			previousElem = elems[i];
		    }
                    var previousId=null;
                    
                    if(previousElem) previousId = SCMS.getElemNum(previousElem);
		    
		    var req = $H({ node_id: node_id,
                                   previous_id: previousId,  
				   adjustment: adjustment });
		    
		    new Ajax.Request(StructureEditor.adjustNodeURL,
				     {
					 parameters : req.toQueryString(),
					 onComplete : function(resp) {
					 }
				     }
				    );    
		}
	},
	
	adjustModifier: function(mod_id,amt) {
		if(StructureEditor.adjustModTimer) {
			clearTimeout(StructureEditor.adjustModTimer);
			StructureEditor.adjustModTimer = null;
		}
		
		StructureEditor.modifierAdjust += Number(amt);
		
		StructureEditor.adjustModTimer = setTimeout(StructureEditor.sendModifierAdjustment,700);
	},
	
	
	sendModifierAdjustment: function() {
		if(StructureEditor.adjustModTimer) {
			clearTimeout(StructureEditor.adjustModTimer);
		}
		if(StructureEditor.modifierAdjust != 0) {
			var adjustment = StructureEditor.modifierAdjust;
			StructureEditor.modifierAdjust = 0;
			
			var mod_id=StructureEditor.nodeSelected;
			var req = $H({ mod_id: mod_id,
							adjustment: adjustment });
							
			new Ajax.Request(StructureEditor.adjustModifierURL,
						{
							parameters : req.toQueryString(),
							onComplete : function(resp) {
							}
						}
						);    
			}
	},
		
		
	moveModifierLeft: function(mod) {
		var parentContainer = mod.parentNode;
		var elems = getChildElements(mod.parentNode);
		
		var previousElem = null;
		for(var i=0;i<elems.length;i++) {
			if(elems[i] == mod)
			break;
			previousElem = elems[i];
		}
		
		if(previousElem) {
			Element.remove(mod);
			parentContainer.insertBefore(mod,previousElem);
			StructureEditor.adjustModifier(mod.mod_id,-1);
		}	
	},
	
	moveModifierRight: function(mod) {
	
		// Get the parent of the mod
		// If we're not the first one
		var parentContainer = mod.parentNode;
		var elems = getChildElements(mod.parentNode);
		
		var nextElem = null;
		for(var i=elems.length-1;i>=0;i--) {
			if(elems[i] == mod)
			break;
			nextElemAfter = nextElem;
			nextElem = elems[i];
		}
		
		if(nextElemAfter && nextElem.className == 'mod_node') {
			Element.remove(mod);
			parentContainer.insertBefore(mod,nextElemAfter);
			StructureEditor.adjustModifier(mod.mod_id,1);
		}
		// Get the mod
		// Remove it from its parents
	
	},
		
	moveNodeUp: function(node) {
	
		// Get the parent of the node
		// If we're not the first one
		var parentContainer = node.parentNode;
		var elems = getChildElementsByClass(node.parentNode,'node');
		
		var previousElem = null;
		for(var i=0;i<elems.length;i++) {
			if(elems[i] == node)
			break;
			previousElem = elems[i];
		}
		
		if(previousElem) {
			Element.remove(node);
			parentContainer.insertBefore(node,previousElem);
			
			StructureEditor.refreshNodeView(parentContainer.parentNode);
			StructureEditor.adjustNode(node.node_id,-1);
		}
		// Get the node
		// Remove it from its parents
	
	},
	
	moveNodeDown: function(node) {
	
		// Get the parent of the node
		// If we're not the first one
		var parentContainer = node.parentNode;
		var elems = getChildElementsByClass(node.parentNode,'node');
		
		var nextElemAfter = null;
		var nextElem = null;
		for(var i=elems.length-1;i>=0;i--) {
			if(elems[i] == node)
			break;
			nextElemAfter = nextElem;
			nextElem = elems[i];
		}
		
		if(nextElemAfter) {
			Element.remove(node);
			parentContainer.insertBefore(node,nextElemAfter);
			StructureEditor.refreshNodeView(parentContainer.parentNode);
			
			StructureEditor.adjustNode(node.node_id,1);
		}
		else if(nextElem) {
			Element.remove(node);
			parentContainer.appendChild(node);
			StructureEditor.refreshNodeView(parentContainer.parentNode);
			StructureEditor.adjustNode(node.node_id,1);
		}
		// Get the node
		// Remove it from its parents
	
	},
	
	submitModuleInfo: function(module_id) {
		var moduleForm = $('module_form');
		var configForm = $('config_form');
		
		var params = Form.serialize(moduleForm);
		params += "&" + Form.serialize(configForm);
		
		new Ajax.Updater('boxcontent',
						"<%= url_for :controller => 'structure', :action => 'update_module' %>/" + module_id,
						{ parameters: params,
							evalScripts: true }
						);
	},
		
	fileSelectCallback: function(file_type,id,url,name) {
		$('file_link').innerHTML = name;
		$('file_id').value = id;
		
  },


  editVersion: function(version_id,args) {
    SCMS.remoteOverlay('<%= url_for :action=>'site_version' %>?site_version=' + version_id,args);
  },

  changeVersion: function(version_id) {
    if(version_id == 'new') {
       StructureEditor.editVersion('');
    } else {
       document.location = '?version=' + version_id;
    }
  },


  deleteVersion: function(version_id) {
    if(confirm("<%= jh 'Are you sure you want to permanently delete an entire friggin site tree? (Hint: no)'.t %>") &&
       confirm("<%= jh 'Come on, really? You want to delete a whole site tree'.t %>")) {
      var params = { version_id: version_id };
      new Ajax.Request("<%= url_for :action => 'delete_tree' %>",
      { parameters: params,
        onComplete: function(req) { document.location = '?'; }
      });
      return false;
    }

  },

  updateExperiment: function(experiment_id, language, action, params) {
    var updateUrl = "<%= url_for :action => 'update_experiment' %>/" + experiment_id;
    var parameters = "language=" + language + "&" + action + "=1";
    if(params) { parameters += '&' + params; }
    new Ajax.Updater('element_info', updateUrl, {parameters: parameters, evalScripts: true});
  }
}

</script>
